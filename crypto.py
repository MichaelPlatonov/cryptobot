import requests
import logging
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, CallbackContext
from settings import TELEGRAM_TOKEN, CHAT_ID
from datetime import datetime, timezone

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)


def is_token_recent(pair_created_at, max_minutes=5):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–æ–∫–µ–Ω –Ω–æ–≤—ã–º (—Å–æ–∑–¥–∞–Ω –º–µ–Ω–µ–µ max_minutes –Ω–∞–∑–∞–¥)
    """
    current_time = int(datetime.now(timezone.utc).timestamp() * 1000)
    time_diff = current_time - pair_created_at
    minutes_old = time_diff / (1000 * 60)
    return minutes_old <= max_minutes


def get_token_info(token_address):
    # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    solscan_url = f"https://public-api.solscan.io/token/meta?tokenAddress={token_address}"
    try:
        response = requests.get(solscan_url)
        if response.status_code == 200:
            token_data = response.json()

            total_supply = float(token_data.get('supply', 0))
            circulating_supply = float(token_data.get('circulatingSupply', 0))
            burned_tokens = total_supply - circulating_supply
            burn_percentage = (burned_tokens / total_supply * 100) if total_supply > 0 else 0

            return {
                "total_supply": total_supply,
                "circulating_supply": circulating_supply,
                "burned_tokens": burned_tokens,
                "burn_percentage": burn_percentage
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–∫–µ–Ω–µ: {e}")
    return None


def get_tokens_from_api():
    # –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    url = "https://api.dexscreener.com/token-profiles/latest/v1"
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤: {url}")
    response = requests.get(url)
    if response.status_code != 200:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤: {response.status_code}")
        return []
    tokens = response.json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã —Ç–æ–∫–µ–Ω—ã: {tokens}")
    return tokens


def check_token_pair(token_address):
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–∫–∞–º–∞
    scam_indicators = []

    url = f"https://api.dexscreener.com/latest/dex/tokens/{token_address}"
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä—ã: {url}")

    response = requests.get(url)
    if response.status_code != 200:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞—Ä—ã: {response.status_code}")
        return None

    data = response.json()
    if not data.get("pairs"):
        return None

    pair = data["pairs"][0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—ã
    pair_created_at = pair.get("pairCreatedAt", 0)
    if not is_token_recent(pair_created_at):
        return None  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ check_token_pair –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    token_info = get_token_info(token_address)

    if token_info:
        burn_percentage = token_info["burn_percentage"]
        if burn_percentage > 90:
            scam_indicators.append(f"‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {burn_percentage:.2f}%")
        elif burn_percentage == 0:
            scam_indicators.append("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤")

    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    base_token = pair["baseToken"]
    price_usd = float(pair.get("priceUsd", 0))
    formatted_price = f"{price_usd:.6f}"
    liquidity_usd = float(pair.get("liquidity", {}).get("usd", 0))
    token_url = pair.get("url", "–ù–µ –Ω–∞–π–¥–µ–Ω–æ")

    # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    txns_24h = pair.get("txns", {}).get("h24", {})
    buys_24h = txns_24h.get("buys", 0)
    sells_24h = txns_24h.get("sells", 0)

    # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
    volume_24h = float(pair.get("volume", {}).get("h24", 0))

    # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    price_change_24h = float(pair.get("priceChange", {}).get("h24", 0))
    price_change_1h = float(pair.get("priceChange", {}).get("h1", 0))

    # –¢–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–∞—Ä—ã
    current_time = int(datetime.now(timezone.utc).timestamp() * 1000)
    time_diff = current_time - pair_created_at

    # –†–∞—Å—á–µ—Ç –º–∏–Ω—É—Ç
    total_minutes = time_diff / (1000 * 60)
    minutes = int(total_minutes)

    time_str = f"{minutes} –º–∏–Ω—É—Ç"
    scam_indicators.append(f"üÜï –ù–æ–≤–∞—è –ø–∞—Ä–∞! –í–æ–∑—Ä–∞—Å—Ç: {minutes} –º–∏–Ω—É—Ç")

    price_change_5m = round(float(pair.get("priceChange", {}).get("m5", 0)), 2)
    price_change_1h = round(float(pair.get("priceChange", {}).get("h1", 0)), 2)
    price_change_6h = round(float(pair.get("priceChange", {}).get("h6", 0)), 2)
    price_change_24h = round(float(pair.get("priceChange", {}).get("h24", 0)), 2)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üîç –ê–Ω–∞–ª–∏–∑ –ù–û–í–û–ì–û —Ç–æ–∫–µ–Ω–∞: {base_token['name']} ({base_token['symbol']})\n"
        f"üìç –ê–¥—Ä–µ—Å: {token_address}\n"
        f"üí≤ –¶–µ–Ω–∞: {formatted_price} USD\n"
        f"üíß –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity_usd:,.2f}\n"
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
    if token_info:
        message += (
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö:\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ –≤—ã–ø—É—â–µ–Ω–æ: {token_info['total_supply']:,.0f}\n"
            f"   ‚Ä¢ –í –æ–±—Ä–∞—â–µ–Ω–∏–∏: {token_info['circulating_supply']:,.0f}\n"
            f"   ‚Ä¢ –°–æ–∂–∂–µ–Ω–æ: {token_info['burned_tokens']:,.0f}\n"
            f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–∂–∂—ë–Ω–Ω—ã—Ö: {token_info['burn_percentage']:.2f}%\n"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    message += (
        f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã:\n"
        f"   ‚Ä¢ 5–º: {price_change_5m:>7.2f}%\n"
        f"   ‚Ä¢ 1—á: {price_change_1h:>7.2f}%\n"
        f"   ‚Ä¢ 6—á: {price_change_6h:>7.2f}%\n"
        f"   ‚Ä¢ 24—á: {price_change_24h:>7.2f}%\n"
        f"‚è± –í–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—ã: {time_str}\n"
        f"üîÑ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ 24—á: {buys_24h} –ø–æ–∫—É–ø–æ–∫ / {sells_24h} –ø—Ä–æ–¥–∞–∂\n"
        f"üîó Dexscreener: {token_url}\n"
    )

    if scam_indicators:
        message += "\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n" + "\n".join(scam_indicators)

    return message


async def monitor_pairs(update: Update, context: CallbackContext):
    await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ (–º–ª–∞–¥—à–µ 5 –º–∏–Ω—É—Ç)...")

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤ —Å API
    tokens = get_tokens_from_api()

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã Solana
    solana_tokens = [token for token in tokens if token.get("chainId") == "solana"]
    logger.info(f"–¢–æ–∫–µ–Ω—ã Solana: {solana_tokens}")

    if not solana_tokens:
        await update.message.reply_text("–¢–æ–∫–µ–Ω—ã Solana –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    found_new_tokens = False
    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ Solana –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
    for token in solana_tokens:
        token_address = token.get("tokenAddress")
        if token_address:
            result = check_token_pair(token_address)
            if result:
                found_new_tokens = True
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
                await bot.send_message(chat_id=CHAT_ID, text=result)

    if not found_new_tokens:
        await update.message.reply_text("‚ùå –ù–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –º–ª–∞–¥—à–µ 5 –º–∏–Ω—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await update.message.reply_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("monitor", monitor_pairs))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
    app.run_polling()


if __name__ == "__main__":
    main()